<!DOCTYPE html>
<html lang="en" ng-app="zanonApp">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="keywords" content="Angular, Node, MongoDB, AWS">
    <meta name="author" content="Diego Zanon">
    <link rel="icon" href="https://zanon.io/favicon.ico" type="image/x-icon">

    <title ng-bind="title + 'Zanon'"></title>

    <script src="/js/ng-cloak.js"></script> <!-- workaround to avoid flickering in prerendered content -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
    <link rel="stylesheet" href="/css/assets/highlight.min.css">
    <link rel="stylesheet" href="/css/site.css">

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->

    <base href="/">
  </head>
  <body ng-controller="MainController">

    <header>
      <div>
        <div class="container">
          <div class="row">
            <div class="col-xs-4 col-sm-2 col-md-2">
              <h1 class="site-name">
                <a href="/">Zanon</a>
              </h1>
            </div>
            <div class="hidden-xs col-sm-6 col-md-6">
              <!-- empty -->
            </div>
            <div class="col-xs-2 col-sm-1 col-md-1 header-img">
              <a href="https://twitter.com/zanon_io">
                <img src="/images/twitter.png" alt="twitter" class="img-responsive">
              </a>
            </div>
            <div class="col-xs-2 col-sm-1 col-md-1 header-img">
              <a href="https://github.com/zanon-io">
                <img src="/images/github.png" alt="github" class="img-responsive">
              </a>
            </div>
            <div class="col-xs-2 col-sm-1 col-md-1 header-img">
              <a href="https://diego.zanon.io">
                <img src="/images/about.png" alt="about" class="img-responsive">
              </a>
            </div>
            <div class="col-xs-2 col-sm-1 col-md-1 header-img">
              <a href="/feed.xml" target="_blank">
                <img src="/images/rss.png" alt="rss" class="img-responsive">
              </a>
            </div>
          </div>
        </div>

      </div>

      <div class="container">
        <nav id="nav" class="navbar-inverse navbar-static-top">
          <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target=".navbar-collapse" aria-expanded="false" aria-controls="navbar">
              <span class="sr-only">Toggle navigation</span>
              <span class="icon-bar"></span>
              <span class="icon-bar"></span>
              <span class="icon-bar"></span>
            </button>
          </div>
          <div id="navbar" class="navbar-collapse collapse">
            <ul class="nav navbar-nav">
              <li ng-class="{ 'active': active.all }"> <a ng-click="filter('all');" href="/">All posts</a></li>
              <li ng-class="{ 'active': active.angular }"><a ng-click="filter('angular');" href="/">Angular</a></li>
              <li ng-class="{ 'active': active.node }"> <a ng-click="filter('node');" href="/">Node</a></li>
              <li ng-class="{ 'active': active.mongodb }"> <a ng-click="filter('mongodb');" href="/">MongoDB</a></li>
              <li ng-class="{ 'active': active.aws }"> <a ng-click="filter('aws');" href="/">AWS</a></li>
              <li ng-class="{ 'active': active.serverless }"> <a ng-click="filter('serverless');" href="/">Serverless</a></li>
            </ul>
          </div><!--/.nav-collapse -->
        </nav>
      </div>
    </header>

    <div class="container">
      <div class="content">
        <div class="ng-cloak" autoscroll="true" ng-view highlight-code>
          
<div class="row post-container">
  <div class="col-md-offset-1 col-md-10 post">
    <h1>Serverless Notifications on AWS</h1>
    <p class="date">NOV 05, 2016</p>
    <div>

<h2 id="tl-dr">TL;DR</h2>
<p>This post is a tutorial that uses the Serverless Framework and AWS IoT for Serverless Notifications.</p>
<p>Demo: <a href="https://serverless-notifications.zanon.io">serverless-notifications.zanon.io</a></p>
<p>Code: <a href="https://github.com/zanon-io/serverless-notifications">GitHub</a></p>
<h2 id="serverless-notifications">Serverless Notifications</h2>
<p>Real-time notifications are an important use case for modern apps. For example, you may need to notify your user that there is another post available in his social feed or that someone else added a comment in one of his photos.</p>
<p>Implementing notifications is an easy task when you use WebSockets and have a dedicated server. You can make a permanent link between the user and the server and use the publish-subscribe pattern to share messages. The browser will subscribe to automatically receive new messages without needing a polling mechanism to constantly check for updates.</p>
<p>But if we are going serverless, we don&#39;t have a dedicated server. Instead, we need a cloud service that will solve this problem for us providing scalability, high availability and charging per messages and not per hour.</p>
<p>In this post, I&#39;m going to describe how I&#39;ve implemented a notification system for unauthenticated users using the Serverless Framework and the AWS IoT for <em>browsers</em>. I know that &quot;Internet of Things&quot; sounds strange to be used in a website, but it supports WebSockets and is very easy to use. Besides, Amazon SNS (Simple Notification Service) has a better name, but doesn&#39;t support WebSockets.</p>
<p>IoT is used due to its simple messaging system. You create a &quot;topic&quot; and make users to subscribe to it. A message sent to this topic will be automatically shared with all subscribed users. A common use case for this is a chat system.</p>
<p>If you want private messages, you just need to create private topics and restrict the access. Only one user will be subscribed to this topic and you can make your system (Lambda functions) to send updates to this topic to notify this specific user.</p>
<h3 id="architecture">Architecture</h3>
<p>In this tutorial, we are going to implement the following architecture.</p>
<p><img src="https://zanon.io/images/posts/2016-11-05-architecture.png" alt="architecture"></p>
<ol>
<li><p>User makes a request to Route 53 that is configured to reference a S3 bucket.</p>
</li>
<li><p>S3 bucket provides the frontend code (HTML / CSS / JavaScript / images) and the IoT client code.</p>
</li>
<li><p>After loading the frontend code, an Ajax request is done to the API Gateway to retrieve temporary keys.</p>
</li>
<li><p>The API Gateway redirects the request to be handled by a Lambda function.</p>
</li>
<li><p>The Lambda function connects to IAM to assume a role and create temporary AWS keys.</p>
</li>
<li><p>Frontend code subscribe to IoT events using the temporary keys.</p>
</li>
</ol>
<blockquote>
<p><strong>Note</strong>: instead of using API Gateway and Lambda to retrieve IAM credentials, you can use Cognito. More on that in the end of this post. </p>
</blockquote>
<h3 id="frontend">Frontend</h3>
<p>Configuring Route 53 and Amazon S3 to serve static files is a common use case. I&#39;ve already covered how to do this in another blog post. You can take a look <a href="https://zanon.io/posts/building-serverless-websites-on-aws-tutorial#host-your-website">here</a> if you want.</p>
<p>In our frontend code, let&#39;s start creating the <strong>index.html</strong> for our layout.</p>
<pre><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot;&gt;
        &lt;title&gt;Serverless Notifications&lt;/title&gt;
        &lt;link href=&quot;bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=&quot;container&quot;&gt;
            &lt;div class=&quot;row&quot;&gt;
                &lt;h2&gt;Serverless Notifications&lt;/h2&gt;
            &lt;/div&gt;
            &lt;div class=&quot;row&quot;&gt;
                &lt;input id=&quot;btn-keys&quot; type=&quot;button&quot; class=&quot;btn btn-primary&quot; value=&#39;Retrieve Keys&#39;&gt;
                &lt;input id=&quot;btn-connect&quot; type=&quot;button&quot; class=&quot;btn btn-primary&quot; value=&#39;Connect&#39;&gt;
            &lt;/div&gt;
            &lt;div class=&quot;row&quot;&gt;
                &lt;input id=&quot;message&quot; type=&quot;text&quot;&gt;
                &lt;input id=&quot;btn-send&quot; type=&quot;button&quot; class=&quot;btn btn-primary&quot; value=&#39;Send Message&#39;&gt;
            &lt;/div&gt;
            &lt;div class=&quot;row&quot;&gt;
                &lt;h3&gt;Log Messages&lt;/h3&gt;
                &lt;ul id=&quot;log&quot;&gt;&lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;    
        &lt;script src=&quot;jquery.min.js&quot;&gt;&lt;/script&gt;
        &lt;script type=&quot;text/javascript&quot;&gt;
            window.lambdaEndpoint = &#39;https://abcdefghij.execute-api.us-east-1.amazonaws.com/dev/iot/keys&#39;;
        &lt;/script&gt;
        &lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt; &lt;!-- IoT --&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p><strong>Note</strong>: I&#39;ve created a <code>window.lambdaEndpoint</code> variable. You need to change this value later with the output of the Serverless Framework. This address will be your function endpoint.</p>
<p>This HTML results in:</p>
<p><a href="https://serverless-notifications.zanon.io"><img src="https://zanon.io/images/posts/2016-11-05-layout.png" alt="layout"></a></p>
<p>In this demo, the user will click on &quot;Retrieve Keys&quot; to make an Ajax call to Lambda with the objective to retrieve temporary keys to connect with our IoT messaging system. With those keys, &quot;Connect&quot; will create a channel and subscribe to messages. The &quot;Send Message&quot; button will share messages with other users (open another browser tab to test).</p>
<h3 id="request-keys-to-lambda">Request keys to Lambda</h3>
<p>We need to make an Ajax call to a Lambda function to retrieve temporary AWS keys.</p>
<p><strong>Note</strong>: I&#39;m using ES6 syntax because this file will be processed by Babel later when I bundle with the IoT client.</p>
<pre><code class="lang-javascript">$(document).ready(() =&gt; {

    let iotKeys;

    $(&#39;#btn-keys&#39;).on(&#39;click&#39;, () =&gt; {
        $.ajax({
            url: window.lambdaEndpoint,
            success: (res) =&gt; {
                addLog(`Endpoint: ${res.iotEndpoint},
                        Region: ${res.region},
                        AccessKey: ${res.accessKey},
                        SecretKey: ${res.secretKey},
                        SessionToken: ${res.sessionToken}`);

                iotKeys = res; // save the keys
            }
        });
    });     
});

const addLog = (msg) =&gt; {
    const date = (new Date()).toTimeString().slice(0, 8);
    $(&quot;#log&quot;).prepend(`&lt;li&gt;[${date}] ${msg}&lt;/li&gt;`);
}
</code></pre>
<h3 id="aws-iot">AWS IoT</h3>
<p>To build our notification system, we need to use a Node module <a href="https://github.com/aws/aws-iot-device-sdk-js">AWS IoT SDK</a> and make a bundle to use in the browser.</p>
<p>In this project, I&#39;ve created another folder named as <strong>iot</strong> to develop the IoT client. It has a <strong>package.json</strong>, so run <code>npm install</code> to install the <strong>aws-iot-device-sdk</strong> dependency.</p>
<p>The IoT object has the functions <code>connect</code> and <code>send</code>. It also offers handlers to other functions like <code>onConnect</code> and <code>onMessage</code>.</p>
<pre><code class="lang-javascript">const awsIot = require(&#39;aws-iot-device-sdk&#39;);

let client, iotTopic;
const IoT = {

    connect: (topic, iotEndpoint, region, accessKey, secretKey, sessionToken) =&gt; {

        iotTopic = topic;

        client = awsIot.device({
            region: region,
            protocol: &#39;wss&#39;,
            accessKeyId: accessKey,
            secretKey: secretKey,
            sessionToken: sessionToken,
            port: 443,
            host: iotEndpoint
        });

        client.on(&#39;connect&#39;, onConnect);
        client.on(&#39;message&#39;, onMessage);            
        client.on(&#39;close&#39;, onClose);     
    },

    send: (message) =&gt; {
        client.publish(iotTopic, message);
    }  
};

const onConnect = () =&gt; {
    client.subscribe(iotTopic);
    addLog(&#39;Connected&#39;);
};

const onMessage = (topic, message) =&gt; {
    addLog(message);
};

const onClose = () =&gt; {
    addLog(&#39;Connection failed&#39;);
};
</code></pre>
<p>As we have developed the IoT client, we can now finish the JavaScript browser code. Add the following:</p>
<pre><code class="lang-javascript">$(&#39;#btn-connect&#39;).on(&#39;click&#39;, () =&gt; {
    const iotTopic = &#39;/serverless/pubsub&#39;;        

    IoT.connect(iotTopic,
                iotKeys.iotEndpoint,
                iotKeys.region,
                iotKeys.accessKey,
                iotKeys.secretKey,
                iotKeys.sessionToken);
});    

$(&#39;#btn-send&#39;).on(&#39;click&#39;, () =&gt; {
    const msg = $(&#39;#message&#39;).val();
    IoT.send(msg);    
});
</code></pre>
<p>Now, let&#39;s create a bundle. It seems that currently this module can&#39;t be bundled with webpack, but with Browserify it worked fine. I&#39;ve created a file named <strong>make-bundle.js</strong> that helps with this. You can take a look in this file <a href="https://github.com/zanon-io/serverless-notifications/blob/master/iot/make-bundle.js">here</a>.</p>
<p>Just run <code>npm install</code> inside this folder and run <code>node make-bundle</code> to create an updated version. This <strong>bundle.js</strong> will be used in our frontend code and must be in the same folder of the <strong>index.html</strong> file.</p>
<h3 id="create-an-iot-role">Create an IoT Role</h3>
<p>Our Lambda function will be responsible by creating temporary AWS keys. However, it needs a role to define what access those keys will provide.</p>
<p>You can create this role using the IAM console or execute the <strong>index.js</strong> file that is inside the <strong>create-role</strong> folder to create one for you. This package uses the AWS SDK and requires a <code>npm install</code> before using.</p>
<p>I&#39;ve used the role name <strong>serverless-notifications</strong>. If you want, you can change this name here, but you will also need to change the name inside the Lambda function.</p>
<p>Create Role:</p>
<pre><code class="lang-javascript">const AWS = require(&#39;aws-sdk&#39;);
const iam = new AWS.IAM();
const sts = new AWS.STS();
const roleName = &#39;serverless-notifications&#39;;

// get the account id
sts.getCallerIdentity({}, (err, data) =&gt; {
  if (err) return console.log(err, err.stack);

  const createRoleParams = {
    AssumeRolePolicyDocument: `{
      &quot;Version&quot;:&quot;2012-10-17&quot;,
      &quot;Statement&quot;:[{
          &quot;Effect&quot;: &quot;Allow&quot;,
          &quot;Principal&quot;: {
            &quot;AWS&quot;: &quot;arn:aws:iam::${data.Account}:root&quot;
          },
          &quot;Action&quot;: &quot;sts:AssumeRole&quot;
        }
      ]
    }`,
    RoleName: roleName
  };

  // create role
  iam.createRole(createRoleParams, (err, data) =&gt; {
    if (err) return console.log(err, err.stack);

    const attachPolicyParams = {
      PolicyDocument: `{
        &quot;Version&quot;: &quot;2012-10-17&quot;,
        &quot;Statement&quot;: [{
          &quot;Action&quot;: [&quot;iot:Connect&quot;, &quot;iot:Subscribe&quot;, &quot;iot:Publish&quot;, &quot;iot:Receive&quot;],
          &quot;Resource&quot;: &quot;*&quot;,
          &quot;Effect&quot;: &quot;Allow&quot;
        }]
      }`,
      PolicyName: roleName,
      RoleName: roleName
    };

    // add iot policy
    iam.putRolePolicy(attachPolicyParams, (err, data) =&gt; {
      if (err) console.log(err, err.stack);
      else     console.log(`Finished creating IoT Role: ${roleName}`);          
    });
  });
});
</code></pre>
<h3 id="serverless-framework">Serverless Framework</h3>
<p>To finish, let&#39;s create a Lambda function that will generate temporary keys (valid for 1 hour) to connect to the IoT service. We are going to use the Serverless Framework to help here. If you don&#39;t know how to use it, you can take a look <a href="https://zanon.io/posts/building-serverless-websites-on-aws-tutorial">here</a> for another tutorial that I&#39;ve created.</p>
<p>The <strong>serverless.yml</strong> must add Lambda permissions for <code>iot:DescribeEndpoint</code> (find your account endpoint) and <code>sts:AssumeRole</code> (create temporary keys).</p>
<pre><code class="lang-xml">service: serverless-notifications

provider:
  name: aws
  runtime: nodejs4.3
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: &quot;Allow&quot;
      Action:
        - &#39;iot:DescribeEndpoint&#39;
      Resource: &quot;*&quot;
    - Effect: &quot;Allow&quot;
      Action:
        - &#39;sts:AssumeRole&#39;
      Resource: &quot;*&quot;

functions:
  auth:
    handler: handler.auth
    events:
      - http: GET iot/keys
    memorySize: 128
    timeout: 10

package:
  exclude:
    - .git/**
    - create-role/**
    - frontend/**
    - iot/**
</code></pre>
<p>Lambda function:</p>
<pre><code class="lang-javascript">&#39;use strict&#39;;

const AWS = require(&#39;aws-sdk&#39;);
const iot = new AWS.Iot();
const sts = new AWS.STS();
const roleName = &#39;serverless-notifications&#39;;

module.exports.auth = (event, context, callback) =&gt; {

    // get the endpoint address
    iot.describeEndpoint({}, (err, data) =&gt; {
        if (err) return callback(err);

        const iotEndpoint = data.endpointAddress;
        const region = getRegion(iotEndpoint);

        // get the account id which will be used to assume a role
        sts.getCallerIdentity({}, (err, data) =&gt; {
            if (err) return callback(err);

            const params = {
                RoleArn: `arn:aws:iam::${data.Account}:role/${roleName}`,
                RoleSessionName: getRandomInt().toString()
            };

            // assume role returns temporary keys
            sts.assumeRole(params, (err, data) =&gt; {
                if (err) return callback(err);

                const res = buildResponseObject(iotEndpoint,
                                                region,
                                                data.Credentials.AccessKeyId,
                                                data.Credentials.SecretAccessKey,
                                                data.Credentials.SessionToken);
                callback(null, res);
            });
        });
    });
};

const buildResponseObject = (iotEndpoint, region, accessKey, secretKey, sessionToken) =&gt; {
    return {
        statusCode: 200,
        headers: {
            &#39;Access-Control-Allow-Origin&#39;: &#39;*&#39;
        },  
        body: JSON.stringify({
            iotEndpoint: iotEndpoint,
            region: region,
            accessKey: accessKey,
            secretKey: secretKey,
            sessionToken: sessionToken
        })
    };
};

const getRegion = (iotEndpoint) =&gt; {
    const partial = iotEndpoint.replace(&#39;.amazonaws.com&#39;, &#39;&#39;);
    const iotIndex = iotEndpoint.indexOf(&#39;iot&#39;);
    return partial.substring(iotIndex + 4);
};

// Get random Int
const getRandomInt = () =&gt; {
    return Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);
};
</code></pre>
<h3 id="testing">Testing</h3>
<p><a href="https://serverless-notifications.zanon.io"><img src="https://zanon.io/images/posts/2016-11-05-test.png" alt="test"></a></p>
<h3 id="pricing">Pricing</h3>
<p>How much does it cost? Only $5 per million messages (USA). It can be pretty cheap depending on your scale and traffic because you don&#39;t need to pay for a dedicated server.</p>
<p>Official pricing page for IoT: <a href="https://aws.amazon.com/iot/pricing/">https://aws.amazon.com/iot/pricing/</a></p>
<h3 id="improving-this-demo">Improving this demo</h3>
<p>This sample considers that there is only one topic. It&#39;s ok if everyone is subscribed to the same channel. However, if you want to send private notifications to a specific user, you need to create a new topic per user.</p>
<p>To handle permissions, I suggest that you keep creating just one role with access to all topics (as we have done in the <strong>create-role</strong> project) and use the <code>assumeRole</code> command (inside Lambda) to create keys with restricted access with a specific topic. This restriction is done passing a policy document as one of the assumeRole parameters (see <a href="http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/STS.html#assumeRole-property">docs</a>).</p>
<p>For authenticated users, I suggest that you use Cognito credentials.</p>
<h3 id="what-more-">What more?</h3>
<p>I&#39;ve tried another experiment with this and created a serverless multiplayer game sample. If you want to develop an HTML5 game in a serverless architecture, you can use IoT to change messages between players and implement a cheap multiplayer game. The performance is good enough for dynamic games.</p>
<p>Multiplayer Game: <a href="https://bombermon.zanon.io">demo</a> and <a href="https://github.com/zanon-io/serverless-multiplayer-game">code</a><br>(you can use your desktop and phone to test the multiplayer feature)</p>
<h3 id="conclusion">Conclusion</h3>
<p>This demo solved the use case of real-time notifications for serverless applications. If you have any doubts, feel free to post in comments.</p>
<h3 id="update-nov-21-2016">UPDATE: Nov 21, 2016</h3>
<blockquote>
<p><a href="https://twitter.com/ben11kehoe">Ben Kehoe</a> suggests that Cognito can be easier than using IAM (with APIG + Lambda, like in this example). I&#39;ve tried and found it to be similar in complexity when dealing with unauthenticated access. However, Cognito is <strong>much</strong> more powerful for <em>authenticated</em> access. If you need to support authenticated users, use Cognito.</p>
</blockquote>
<p>Below follows how to use Cognito for <em>unauthenticated</em> access.</p>
<p>1) Create an Identity Pool</p>
<pre><code class="lang-javascript">const AWS = require(&#39;aws-sdk&#39;);
const cognitoidentity = new AWS.CognitoIdentity();

const params = {
  AllowUnauthenticatedIdentities: true,
  IdentityPoolName: &#39;serverless-notifications&#39;  
};

cognitoidentity.createIdentityPool(params, (err, data) =&gt; {
  if (err) console.log(err, err.stack);
  else     console.log(data.IdentityPoolId); // save the IdentityPoolId
});
</code></pre>
<p>2) Create a Role for this Identity Pool like we&#39;ve done before. However, for the <code>AssumeRolePolicyDocument</code>, use the following JSON (set the IdentityPoolId with the value returned in the previous function).</p>
<pre><code class="lang-javascript">`{
  &quot;Version&quot;: &quot;2012-10-17&quot;,
  &quot;Statement&quot;: [
    {
      &quot;Effect&quot;: &quot;Allow&quot;,
      &quot;Principal&quot;: {
        &quot;Federated&quot;: &quot;cognito-identity.amazonaws.com&quot;
      },
      &quot;Action&quot;: &quot;sts:AssumeRoleWithWebIdentity&quot;,
      &quot;Condition&quot;: {
        &quot;StringEquals&quot;: {
          &quot;cognito-identity.amazonaws.com:aud&quot;: ${IdentityPoolId}
        },
        &quot;ForAnyValue:StringLike&quot;: {
          &quot;cognito-identity.amazonaws.com:amr&quot;: &quot;unauthenticated&quot;
        }
      }
    }
  ]
}`
</code></pre>
<p>3) Set the Identity Pool with the new Role</p>
<pre><code class="lang-javascript">const AWS = require(&#39;aws-sdk&#39;);
const cognitoidentity = new AWS.CognitoIdentity();

const params = {
  IdentityPoolId: &#39;IDENTITY_POOL_ID&#39;,
  Roles: { 
    unauthenticated: &#39;ROLE_ARN&#39;,
    authenticated: &#39;ROLE_ARN&#39;
  }
};

cognitoidentity.setIdentityPoolRoles(params, (err, data) =&gt; {
  if (err) console.log(err, err.stack);
  else     console.log(data); // successful response returns an empty object
});
</code></pre>
<p>4) In the browser, request the Cognito credentials</p>
<pre><code class="lang-javascript">const AWS = require(&#39;aws-sdk&#39;);

AWS.config.region = &#39;YOUR_COGNITO_REGION&#39;;
AWS.config.credentials = new AWS.CognitoIdentityCredentials({
    IdentityPoolId: &#39;IDENTITY_POOL_ID&#39;,
});

AWS.config.credentials.get(() =&gt; {

    // Use these credentials with IoT
    const accessKeyId = AWS.config.credentials.accessKeyId;
    const secretAccessKey = AWS.config.credentials.secretAccessKey;
    const sessionToken = AWS.config.credentials.sessionToken;
});
</code></pre>
<a share-twitter="share-twitter" data-text="&quot;Serverless Notifications on AWS&quot;" data-url="https://zanon.io/posts/serverless-notifications-on-aws" data-via="zanon_io" data-size="large"></a>
    </div>
  </div>
</div>
<div class="disqus">
  <dir-disqus></dir-disqus>
</div>
        </div>
      </div>
    </div>

    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.1/angular.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.1/angular-route.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/0.13.0/ui-bootstrap-tpls.min.js"></script>

    <script src="/js/app.js"></script>
    <script src="/js/controllers.js"></script>
    <script src="/js/directives.js"></script>
    <script src="/js/routes.js"></script>

    <script src="/js/assets/404game.min.js"></script>
    <script src="/js/assets/dir-disqus.min.js"></script>
    <script src="/js/assets/highlight.min.js"></script>

    <script src="https://platform.twitter.com/widgets.js"></script>

    <!-- Google Analytics -->
    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

      ga('create', 'UA-63834414-1', 'auto');
      ga('send', 'pageview');
    </script>
  </body>
</html>
