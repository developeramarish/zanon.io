<!DOCTYPE html>
<html lang="en" ng-app="zanonApp">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="keywords" content="Angular, Node, MongoDB, AWS">
    <meta name="author" content="Diego Zanon">
    <link rel="icon" href="http://zanon.io/favicon.ico" type="image/x-icon">

    <title>zanon.io</title>

    <script src="/js/ng-cloak.js"></script> <!-- workaround to avoid flickering in prerendered content -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.6/styles/monokai_sublime.min.css">
    <link rel="stylesheet" href="/css/site.css">

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->

    <base href="/">
  </head>
  <body ng-controller="MainController">

    <header>
      <div>
        <div class="container">
          <div class="row">
            <div class="col-xs-8 col-sm-2 col-md-2">
              <h1 class="site-name">
                <a href="/">zanon.io</a>
              </h1>
            </div>
            <div class="hidden-xs col-sm-8 col-md-8">
              <!-- empty -->
            </div>
            <div class="col-xs-2 col-sm-1 col-md-1 header-img">
              <a href="http://diego.zanon.io">
                <img src="/images/about.png" alt="about" class="img-responsive">
              </a>
            </div>
            <div class="col-xs-2 col-sm-1 col-md-1 header-img">
              <a href="/feed.xml" target="_blank">
                <img src="/images/rss.png" alt="rss" class="img-responsive">
              </a>
            </div>
          </div>
        </div>

      </div>

      <div class="container">
        <nav id="nav" class="navbar-inverse navbar-static-top">
          <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target=".navbar-collapse" aria-expanded="false" aria-controls="navbar">
              <span class="sr-only">Toggle navigation</span>
              <span class="icon-bar"></span>
              <span class="icon-bar"></span>
              <span class="icon-bar"></span>
            </button>
          </div>
          <div id="navbar" class="navbar-collapse collapse">
            <ul class="nav navbar-nav">
              <li ng-class="{ 'active': active.all }">    <a ng-click="filter('all');"      href="/">All posts</a></li>
              <li ng-class="{ 'active': active.angular }"><a ng-click="filter('angular');"  href="/">Angular</a></li>
              <li ng-class="{ 'active': active.node }">   <a ng-click="filter('node');"     href="/">Node</a></li>
              <li ng-class="{ 'active': active.mongodb }"><a ng-click="filter('mongodb');"  href="/">MongoDB</a></li>
              <li ng-class="{ 'active': active.aws }">    <a ng-click="filter('aws');"      href="/">AWS</a></li>
            </ul>
          </div><!--/.nav-collapse -->
        </nav>
      </div>
    </header>

    <div class="container">
      <div class="content">
        <div class="ng-view-background ng-cloak" autoscroll="true" ng-view highlight-code>
          
<div class="row">
  <div class="col-md-offset-1 col-md-10 post">
    <h1>AngularJS with Pretty URLs: Removing the # in Amazon S3</h1>
    <p class="date">AUG 09, 2015</p>
    <div>

<h2 id="angular-urls">Angular URLs</h2>
<p>Angular ngRoute uses the # (hashtag) by default when routing pages. For example, if you have an &quot;about&quot; page, your URL will look like <code>http://mywebsite.com/#/about</code>. With this, the # looks misplaced since we are used to see URLs like <code>http://mywebsite.com/about</code>.</p>
<p>The reason for this ugly character to be used is to avoid the need of a server-side rewrite rule. With this, learning and using ngRoute is easier.</p>
<p>To prettify your URLs, the first step is to prepare your Angular app:</p>
<ol>
<li>Add a <code>base</code> URL</li>
<li>Configure the <code>$locationProvider</code></li>
<li>Fix your application links</li>
</ol>
<h2 id="add-a-base-url">Add a base URL</h2>
<p>The base URL is not mandatory, but it&#39;s better to add it to <a href="https://docs.angularjs.org/error/$location/nobase">avoid some extra configurations and to add support for old browsers</a>.</p>
<p>To add this, just place the <code>base</code> element inside your page&#39;s <code>head</code>.</p>
<pre><code class="lang-html">&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;My Page&lt;/title&gt;
    &lt;base href=&quot;/&quot;&gt;
  &lt;/head&gt;
  (...)
</code></pre>
<p>Note: some websites hosts more than one application. If that&#39;s your case, the root of your app may be something like <code>http://mywebsite.com/myapp</code>. In this example, your base will be:</p>
<pre><code class="lang-html">&lt;base href=&quot;/myapp/&quot;&gt;
</code></pre>
<h2 id="configure-the-location-provider">Configure the Location Provider</h2>
<p>When configuring your ngRoute rules, just inject the <code>$locationProvider</code> and configure it with <code>$locationProvider.html5Mode(true)</code>. With this, you&#39;re telling your Angular app to use <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history">HTML5 history.pushState()</a> feature to control routing and to change URLs without refreshing the pages.</p>
<pre><code class="lang-javascript">angular
  .module(&#39;myApp&#39;)
  .config([
    &#39;$routeProvider&#39;,
    &#39;$locationProvider&#39;,
    function($routeProvider, $locationProvider) {
      $routeProvider
      .when(&#39;/&#39;, {
        templateUrl: &#39;home.html&#39;
      })
      .when(&#39;/about&#39;, {
        templateUrl: &#39;about.html&#39;
      });

      // Add HTML5 History API support
      $locationProvider.html5Mode(true);
  }
]);
</code></pre>
<h2 id="fix-your-application-links">Fix your application links</h2>
<p>If your application was working with #, probably you have many links starting with <code>#/</code> and you need to remove them now. Search through all files to locate things like <code>&lt;a href=&quot;#/&quot;&gt;About&lt;/a&gt;</code> and change to <code>&lt;a href=&quot;/&quot;&gt;About&lt;/a&gt;</code>.</p>
<h2 id="server-url-rewrite">Server URL Rewrite</h2>
<p>You have adjusted the client-side. Now you need to adjust the server-side. Otherwise, when you browse for <code>http://mywebsite.com/about</code>, the server will try to locate a file named &quot;about&quot; at your root level and will return a 404 error. You don&#39;t want to create a &quot;about&quot; file. What you want is to redirect to the main file where your Angular app is defined (usually index.html) and retrieve the &quot;about&quot; information maintaining the URL with <code>/about</code>.</p>
<p>To configure this, each server has its own guide. You can follow this <a href="https://github.com/angular-ui/ui-router/wiki/Frequently-Asked-Questions#how-to-configure-your-server-to-work-with-html5mode">link</a> to see how this is done for Apache, IIS and others. For Amazon S3, read below.</p>
<h2 id="amazon-s3-url-rewrite">Amazon S3 URL Rewrite</h2>
<p>First, open the AWS Management Console and browse to S3. Next, click on your website bucket in the left panel and see its properties in the right panel. Clicking on &quot;Static Website Hosting&quot; gives you the following options:</p>
<p><img src="http://zanon.io/images/posts/2015-08-09-s3.png" alt="s3-configuration"></p>
<p>You&#39;ll edit the redirection rules using the following XML:</p>
<pre><code class="lang-xml">&lt;RoutingRules&gt;
  &lt;RoutingRule&gt;
    &lt;Condition&gt;
      &lt;HttpErrorCodeReturnedEquals&gt;404&lt;/HttpErrorCodeReturnedEquals&gt;
    &lt;/Condition&gt;
    &lt;Redirect&gt;
      &lt;HostName&gt;zanon.io&lt;/HostName&gt; &lt;!-- add your domain name here --&gt;
      &lt;ReplaceKeyPrefixWith&gt;#/&lt;/ReplaceKeyPrefixWith&gt;
    &lt;/Redirect&gt;
  &lt;/RoutingRule&gt;
&lt;/RoutingRules&gt;
</code></pre>
<p>Note: after saving, you may need up to 5 minutes to see the configuration taking effect.</p>
<p>In this configuration, you&#39;re telling AWS that when a user browses for an URL that does not exist (404 error), instead of showing the error, AWS will redirect the user to another page replacing the key prefix <code>/</code> with <code>#/</code>.  This means that if your user browses for <code>http://mywebsite.com/about</code>, Amazon will redirect to <code>http://mywebsite.com/#/about</code>, but since we have configured HTML5 push state, Angular will handle the request and rewrite again the URL to <code>http://mywebsite.com/about</code>.</p>
<h2 id="update-sep-06-2015">UPDATE: Sep 06, 2015</h2>
<blockquote>
<p>This solution works pretty well, but configuring this S3 URL Rewrite is <strong>not</strong> SEO-friendly as I&#39;ve discovered later. You can read why in my Stack Overflow <a href="http://stackoverflow.com/q/32429488/1476885">question/answer</a>. If you want an application SEO-friendly and with pretty URLs in Amazon, you need to avoid this S3 rewrite rule and pre-render all of your pages before uploading them. You can read more about this in my blog post: <a href="http://zanon.io/posts/angularjs-how-to-create-a-spa-crawlable-and-seo-friendly">Angular: How to create a SPA crawlable and SEO friendly?</a></p>
</blockquote>

    </div>
  </div>
</div>
<dir-disqus></dir-disqus>
        </div>
      </div>
    </div>

    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.1/angular.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.1/angular-route.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/0.13.0/ui-bootstrap-tpls.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.6/highlight.min.js"></script>

    <script src="/js/app.js"></script>
    <script src="/js/controllers.js"></script>
    <script src="/js/directives.js"></script>
    <script src="/js/routes.js"></script>

    <script src="/js/assets/404game.min.js"></script>
    <script src="/js/assets/dir-disqus.min.js"></script>

    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

      ga('create', 'UA-63834414-1', 'auto');
      ga('send', 'pageview');
    </script>
  </body>
</html>
