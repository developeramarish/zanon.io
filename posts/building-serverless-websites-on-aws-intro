<!DOCTYPE html>
<html lang="en" ng-app="zanonApp">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="keywords" content="Angular, Node, MongoDB, AWS">
    <meta name="author" content="Diego Zanon">
    <link rel="icon" href="http://zanon.io/favicon.ico" type="image/x-icon">

    <title ng-bind="title + 'zanon.io'">zanon.io</title>

    <script src="/js/ng-cloak.js"></script> <!-- workaround to avoid flickering in prerendered content -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.6/styles/monokai_sublime.min.css">
    <link rel="stylesheet" href="/css/site.css">

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->

    <base href="/">
  </head>
  <body ng-controller="MainController">

    <header>
      <div>
        <div class="container">
          <div class="row">
            <div class="col-xs-4 col-sm-2 col-md-2">
              <h1 class="site-name">
                <a href="/">zanon.io</a>
              </h1>
            </div>
            <div class="hidden-xs col-sm-6 col-md-6">
              <!-- empty -->
            </div>
            <div class="col-xs-2 col-sm-1 col-md-1 header-img">
              <a href="https://twitter.com/zanon_io">
                <img src="/images/twitter.png" alt="twitter" class="img-responsive">
              </a>
            </div>
            <div class="col-xs-2 col-sm-1 col-md-1 header-img">
              <a href="https://github.com/zanon-io">
                <img src="/images/github.png" alt="github" class="img-responsive">
              </a>
            </div>
            <div class="col-xs-2 col-sm-1 col-md-1 header-img">
              <a href="http://diego.zanon.io">
                <img src="/images/about.png" alt="about" class="img-responsive">
              </a>
            </div>
            <div class="col-xs-2 col-sm-1 col-md-1 header-img">
              <a href="/feed.xml" target="_blank">
                <img src="/images/rss.png" alt="rss" class="img-responsive">
              </a>
            </div>
          </div>
        </div>

      </div>

      <div class="container">
        <nav id="nav" class="navbar-inverse navbar-static-top">
          <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target=".navbar-collapse" aria-expanded="false" aria-controls="navbar">
              <span class="sr-only">Toggle navigation</span>
              <span class="icon-bar"></span>
              <span class="icon-bar"></span>
              <span class="icon-bar"></span>
            </button>
          </div>
          <div id="navbar" class="navbar-collapse collapse">
            <ul class="nav navbar-nav">
              <li ng-class="{ 'active': active.all }">    <a ng-click="filter('all');"      href="/">All posts</a></li>
              <li ng-class="{ 'active': active.angular }"><a ng-click="filter('angular');"  href="/">Angular</a></li>
              <li ng-class="{ 'active': active.node }">   <a ng-click="filter('node');"     href="/">Node</a></li>
              <li ng-class="{ 'active': active.mongodb }"><a ng-click="filter('mongodb');"  href="/">MongoDB</a></li>
              <li ng-class="{ 'active': active.aws }">    <a ng-click="filter('aws');"      href="/">AWS</a></li>
            </ul>
          </div><!--/.nav-collapse -->
        </nav>
      </div>
    </header>

    <div class="container">
      <div class="content">
        <div class="ng-cloak" autoscroll="true" ng-view highlight-code>
          
<div class="row post-container">
  <div class="col-md-offset-1 col-md-10 post">
    <h1>Building Serverless Websites on AWS - Intro</h1>
    <p class="date">Nov 15, 2015</p>
    <div>

<h2 id="serverless-websites">Serverless Websites</h2>
<p>A serverless website is the one that doesn&#39;t require a server instance running all the time. When a request is made to this website, a third-party service starts a very small piece of code that runs, answers the request and shuts down. It only runs on-demand.</p>
<p>The front-end code (HTML/CSS/JS) is hosted in a CDN or in a simpler storage service, like Amazon S3 or Azure Blob Storage, and your DNS is configured to redirect requests to those services. The back-end code is the tricky part and that will be explained later.</p>
<p>As a simple example of the concept, this blog is a serverless website. It doesn&#39;t require server-side processing neither a database. This approach has three main benefits:</p>
<ul>
<li><strong>Infinite scalability</strong>: as you aren&#39;t managing a server instance, you don&#39;t need to worry about adding/removing new machines to your farm as your traffic grows/shrink. It will be smoothly handled by your Cloud Service and your content will always be served with the same low latency and high bandwidth.</li>
<li><strong>High availability</strong>: as your Cloud Service is responsible to handle the availability of your static content, you can expect up to 99,99% over a given year.</li>
<li><strong>Low costs</strong>: storage is much more cheap than CPU/RAM allocation. As an example, this blog costs only US$ 0.03 per month (the minimum cost). If I&#39;ve used a server machine to host it, I would be paying at least US$ 7 per month.</li>
</ul>
<p>So, that&#39;s great for a static content. But what can we do for dynamic websites? If my site needs authentication, page routing, server-side business rules and a database, what options do we have? It will need to spend CPU time and you can&#39;t escape from that, but if you use AWS Lambda, you can significantly reduce your costs and achieve <em>infinite</em> scalability.</p>
<p>As an interesting real case of building a serverless website, I recommend you to read this <a href="https://www.reddit.com/r/webdev/comments/3oiilb/our_company_did_a_collab_with_valve_for_some_new/">Reddit</a> post.</p>
<p>Summary: an e-commerce website built with traditional tools/infra completely broke after being advertised by Valve in a blog post. After some rework using JAWS (later named as Serverless), AWS Lambda, S3 and DynamoDB, Valve advertised it again and they were able to handle 60k users requests in 2 hours with the cost of only US$ 0.07.</p>
<p>Quoting <a href="https://www.reddit.com/r/webdev/comments/3oiilb/our_company_did_a_collab_with_valve_for_some_new/cvyf5s5">one of the comments</a>:</p>
<blockquote>
<p>It&#39;s a cheap cheap setup when you&#39;re not doing anything, and it only gets expensive when you&#39;re making a lot of money. That&#39;s a great thing for a business.</p>
</blockquote>
<h2 id="serverless-framework-formely-jaws-">Serverless Framework (formely JAWS)</h2>
<p><img src="http://zanon.io/images/posts/2015-11-15-serverless-logo.png" alt="serverless-logo"></p>
<p>The <a href="https://github.com/serverless/serverless">Serverless Framework</a> (formely JAWS) is an open-source framework that was created to help developers to build serverless apps using AWS features, mainly AWS Lambda (for code execution) and Amazon API Gateway (for Routing).</p>
<p>Instead of spinning up a full-blown server, the developer is invited to use a command line tool to deploy code-blocks to Amazon. Since each lambda function acts like a microservice and your app may end up with dozens of them distributed between multiple regions and managed by multi-developer teams in multi-stage environments, the Serverless Framework targets a better setup to avoid a messy solution.</p>
<p>I&#39;ve created another <a href="http://zanon.io/posts/building-serverless-websites-on-aws-tutorial">blog post</a> to show a simple example of how to use Serverless, but first you need to know what AWS technologies are involved.</p>
<p>The first thing that you need to be aware is that this solution is highly dependent on AWS. Usually, we would avoid being highly attached to a third-party solution. If AWS breaks forever, you will need some hours to adapt your code to be able to deploy it again at another host. However, AWS is so reliable and the benefits of serverless apps are so great that I would not be so worried about it.</p>
<h2 id="aws-lambda-code-execution-">AWS Lambda (Code Execution)</h2>
<p><img src="http://zanon.io/images/posts/2015-11-15-lambda.png" alt="lambda"></p>
<p>Lambda is a service where you can host your code and it will be executed when triggered by events. Lambda supports, currently, code written in JavaScript (Node.js), Python or Java.</p>
<p>Lambda is a managed service. It means that AWS is responsible for allocating machines on demand to execute your code and is responsible for high availability and to scale following your needs.</p>
<p>The code you run on AWS Lambda is called a &quot;Lambda function&quot;. It needs to be stateless with no affinity to the underlying infrastructure. This prerequisite is what enables Amazon to rapidly launch many copies of the function to serve <em>infinite scalability</em> (infinite and fast).</p>
<p>As everything on AWS, Lambda also have a &quot;Pay Per Use&quot; model. You will only pay for the computer resources that you use, but in this case, its much better than EC2 because your EC2 machines will always have some computer resources that are allocated for you but not necessarily in use and this allocation is charged. Regarding Lambda, you will allocate resources only for the duration of your Lambda function execution. That&#39;s why its a much cheaper solution.</p>
<p>In Lambda, you pay for the number of requests and the amount of memory-time you allocate for your requests. Currently, it <a href="https://aws.amazon.com/lambda/pricing/">costs</a> US$ 0.0000002 per request (or US$ 0.20 per 1 million requests) and US$ 0.00001667 for every GB-second used (billing is metered in increments of 100 milliseconds). Also, the free tier includes 1M free requests and 400,000 GB-seconds of compute time per month and this bonus is given even if you have expired your 12 month AWS Free Tier term.</p>
<p>For example, if you allocated 512 MB of memory for a function that was executed 10 million times in one month and it ran for 500 milliseconds each time, you would pay only US$ 36.81.</p>
<p>How many server-side requests your user makes to access your site per visit? I would guess something like 100 requests. It means that US$ 36.81 served 100,000 users and each user has cost only US$ 0.0004 (not including data transfer costs).</p>
<h2 id="amazon-api-gateway-routing-">Amazon API Gateway (Routing)</h2>
<p><img src="http://zanon.io/images/posts/2015-11-15-api-gateway.png" alt="api-gateway"></p>
<p>API Gateway is a service that lets you build RESTful APIs that acts like the &quot;front door&quot; of your application. It&#39;s the service that will receive all incoming requests, check authorization and route them to the underlying system that is responsible to handle it. In our case, it&#39;ll be AWS Lambda. API Gateway is also fully managed by AWS what means again high availability and scalability.</p>
<p>The following image shows an example of website that is fully serverless. The static content (HTML/CSS/JS) are hosted in S3, an user browses the page and click to see its local weather information, the API Gateway receives the request and triggers a Lambda function that will process it calling a DynamoDB database.</p>
<p><a href="https://aws.amazon.com/lambda/"><img src="http://zanon.io/images/posts/2015-11-15-lambda-web-apps.png" alt="lambda-web-apps"></a></p>
<p>The pricing model is also &quot;Pay Per Use&quot;. It currently <a href="https://aws.amazon.com/api-gateway/pricing/">costs</a> US$ 3.50 per million API calls received plus US$ 0.09 per GB of data transferred.</p>
<h2 id="authentication">Authentication</h2>
<p>Amazon API Gateway has three options to handle authentication: <a href="https://aws.amazon.com/cognito">Amazon Cognito</a>, <a href="https://aws.amazon.com/iam">AWS Identity and Access Management (IAM)</a> or <a href="http://oauth.net/">OAuth 2.0</a>.</p>
<p>Amazon Cognito is a service that allows you to safely store user credentials and these can be used in API Gateway as a token based authentication system.</p>
<p>IAM is the authentication system that is used for all AWS services. What API Gateway offers is a way to easily create API Keys, with fine-grained access permissions, to be distributed to third-party developers or simply to generate keys that will be used by your client devices (website or mobile app) to consume your API methods.</p>
<p>OAuth 2.0 is an authorization framework that enables your application to authenticate your users based on credentials controlled by third-party applications, like Facebook, Twitter or GitHub.</p>
<h2 id="serverless-databases">Serverless Databases</h2>
<p>Amazon offers a service called <a href="https://aws.amazon.com/rds">RDS</a>. It&#39;s fully managed and you don&#39;t need to worry about availability. However, it does not satisfy our objective to &quot;Pay Per Use&quot; and is not so easy to scale. As you have to allocate a database to run it, you&#39;ll pay per hour even if nobody is using your app.</p>
<p>The remaining options that we have are <a href="https://aws.amazon.com/dynamodb">DynamoDB</a> and <a href="https://aws.amazon.com/simpledb">SimpleDB</a>.</p>
<p>DynamoDB solves the scalability difficulties that you would have using RDS and is a much more robust solution than SimpleDB. However, its pricing model also requires fixed costs to provision per-hour capacity. No usage means that you will still have some costs to handle.</p>
<p>SimpleDB have also a fixed cost of how much data you have stored, but the main cost is dependent on your usage. Your usage is measured in how many machine hours you spend to process your queries. Also, scalability is graciously handled by AWS and you can have bursts of increased usage without delays. If your app does not require complex queries and you have a very unpredictable usage, this solution may be best cost-effective.</p>
<p>So far, I would suggest <a href="https://www.firebase.com/">Firebase</a> as the best service for a serverless database. It&#39;s not an Amazon product, but is a Google one and it allows much more complex apps than SimpleDB.</p>
<h2 id="to-sum-up">To sum up</h2>
<p>Below follows what we usually have in a dynamic website and what AWS feature we can use to build a serverless webapp.</p>
<ul>
<li><strong>Static Content</strong>: the HTML / CSS / JavaScript code that runs at the client-side can be hosted in S3.</li>
<li><strong>Routing</strong>: API Gateway is responsible for receiving requests and to call the correspondent Lambda function.</li>
<li><strong>Authentication</strong>: IAM, Incognito or OAuth 2.0.</li>
<li><strong>Server-Side Code</strong>: Lambda functions handle each request.</li>
<li><strong>Database</strong>: SimpleDB is a pretty scalable NoSQL database, but consider using Google&#39;s Firebase.</li>
</ul>
<h2 id="update-dec-27-2015">UPDATE: Dec 27, 2015</h2>
<blockquote>
<p>Replaced the JAWS reference to Serverless since it was rebranded.</p>
</blockquote>
<a share-twitter="share-twitter" data-text="&quot;Building Serverless Websites on AWS - Intro&quot;" data-url="http://zanon.io/posts/building-serverless-websites-on-aws-intro" data-via="zanon_io" data-size="large"></a>
    </div>
  </div>
</div>
<div class="disqus">
  <dir-disqus></dir-disqus>
</div>
        </div>
      </div>
    </div>

    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.1/angular.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.1/angular-route.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/0.13.0/ui-bootstrap-tpls.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.6/highlight.min.js"></script>

    <script src="/js/app.js"></script>
    <script src="/js/controllers.js"></script>
    <script src="/js/directives.js"></script>
    <script src="/js/routes.js"></script>

    <script src="/js/assets/404game.min.js"></script>
    <script src="/js/assets/dir-disqus.min.js"></script>

    <script src="http://platform.twitter.com/widgets.js"></script>

    <!-- Google Analytics -->
    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

      ga('create', 'UA-63834414-1', 'auto');
      ga('send', 'pageview');
    </script>
  </body>
</html>
