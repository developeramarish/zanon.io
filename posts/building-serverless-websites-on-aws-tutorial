<!DOCTYPE html>
<html lang="en" ng-app="zanonApp">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="keywords" content="Angular, Node, MongoDB, AWS">
    <meta name="author" content="Diego Zanon">
    <link rel="icon" href="http://zanon.io/favicon.ico" type="image/x-icon">

    <title ng-bind="title + 'zanon.io'">zanon.io</title>

    <script src="/js/ng-cloak.js"></script> <!-- workaround to avoid flickering in prerendered content -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.6/styles/monokai_sublime.min.css">
    <link rel="stylesheet" href="/css/site.css">

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->

    <base href="/">
  </head>
  <body ng-controller="MainController">

    <header>
      <div>
        <div class="container">
          <div class="row">
            <div class="col-xs-4 col-sm-2 col-md-2">
              <h1 class="site-name">
                <a href="/">zanon.io</a>
              </h1>
            </div>
            <div class="hidden-xs col-sm-6 col-md-6">
              <!-- empty -->
            </div>
            <div class="col-xs-2 col-sm-1 col-md-1 header-img">
              <a href="https://twitter.com/zanon_io">
                <img src="/images/twitter.png" alt="twitter" class="img-responsive">
              </a>
            </div>
            <div class="col-xs-2 col-sm-1 col-md-1 header-img">
              <a href="https://github.com/zanon-io">
                <img src="/images/github.png" alt="github" class="img-responsive">
              </a>
            </div>
            <div class="col-xs-2 col-sm-1 col-md-1 header-img">
              <a href="http://diego.zanon.io">
                <img src="/images/about.png" alt="about" class="img-responsive">
              </a>
            </div>
            <div class="col-xs-2 col-sm-1 col-md-1 header-img">
              <a href="/feed.xml" target="_blank">
                <img src="/images/rss.png" alt="rss" class="img-responsive">
              </a>
            </div>
          </div>
        </div>

      </div>

      <div class="container">
        <nav id="nav" class="navbar-inverse navbar-static-top">
          <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target=".navbar-collapse" aria-expanded="false" aria-controls="navbar">
              <span class="sr-only">Toggle navigation</span>
              <span class="icon-bar"></span>
              <span class="icon-bar"></span>
              <span class="icon-bar"></span>
            </button>
          </div>
          <div id="navbar" class="navbar-collapse collapse">
            <ul class="nav navbar-nav">
              <li ng-class="{ 'active': active.all }">    <a ng-click="filter('all');"      href="/">All posts</a></li>
              <li ng-class="{ 'active': active.angular }"><a ng-click="filter('angular');"  href="/">Angular</a></li>
              <li ng-class="{ 'active': active.node }">   <a ng-click="filter('node');"     href="/">Node</a></li>
              <li ng-class="{ 'active': active.mongodb }"><a ng-click="filter('mongodb');"  href="/">MongoDB</a></li>
              <li ng-class="{ 'active': active.aws }">    <a ng-click="filter('aws');"      href="/">AWS</a></li>
            </ul>
          </div><!--/.nav-collapse -->
        </nav>
      </div>
    </header>

    <div class="container">
      <div class="content">
        <div class="ng-cloak" autoscroll="true" ng-view highlight-code>
          
<div class="row post-container">
  <div class="col-md-offset-1 col-md-10 post">
    <h1>Building Serverless Websites on AWS - Tutorial</h1>
    <p class="date">Jan 31, 2016</p>
    <div>

<h2 id="objective">Objective</h2>
<p>This tutorial shows how to create a simple serverless application. If you don&#39;t know yet what this concept is and its benefits, you can read my previous blog post <a href="http://zanon.io/posts/building-serverless-websites-on-aws-intro">here</a>. I also explain a little more about each technology that will be used in this example.</p>
<p>The demo app is hosted at <a href="http://serverless-demo.zanon.io">http://serverless-demo.zanon.io</a> and the source code is available at <a href="https://github.com/zanon-io/aws-serverless-demo">https://github.com/zanon-io/aws-serverless-demo</a></p>
<p>This demo just shows a fake weather information when a button is clicked. To achieve this, we are using the following AWS tools:</p>
<p><img src="http://zanon.io/images/posts/2016-01-31-lambda-web-apps.png" alt="lambda-web-apps"></p>
<p>This image was adapted from <a href="https://aws.amazon.com/lambda/">here</a>. Most Serverless demos uses DynamoDB as the database, but I&#39;ve used SimpleDB since that&#39;s the only serverless database offered by AWS. DynamoDB allows you to build more complex apps, but you need to provision capacity and you will pay for it even if no one is using your app. A true serverless app aims for <em>infinite scalability</em>, <em>high availability</em> <strong>and</strong> <em>pay only for what you use</em>, so DynamoDB lacks the last one.</p>
<h2 id="summary">Summary</h2>
<p>This tutorial tries to cover everything to build a serverless site, including how to configure your domain and host your data. If you want to skip this part, just jump for the section that you are interested.</p>
<ol>
<li><a href="#host-your-website">Host your Website</a></li>
<li><a href="#front-end">Front-End</a></li>
<li><a href="#serverless-framework">Serverless Framework</a></li>
<li><a href="#simpledb">SimpleDB</a></li>
</ol>
<h2 id="host-your-website">Host your Website</h2>
<h3 id="register-a-domain">Register a Domain</h3>
<p>Buying a domain name is not required for this demo to work. If you want to go beyond testing to make something useful, the first step is to buy a domain with a nice name. As you can see, this is hard! The best ones are already taken.</p>
<h3 id="create-amazon-s3-buckets">Create Amazon S3 buckets</h3>
<p><a href="https://console.aws.amazon.com/s3">Amazon S3 buckets</a> is the service where you will manually host your front-end code (HTML/CSS/JavaScript and images) and also where the Serverless Framework will automatically host (in a different bucket) the back-end code.</p>
<p>If you&#39;ve bought a domain named as <strong>example.com</strong>, you need to create a bucket with the same <strong>example.com</strong> name and configure it to enable website hosting.</p>
<p><img src="http://zanon.io/images/posts/2016-01-31-s3-hosting.png" alt="s3-hosting"></p>
<p>If you want to support old people that still like to type <strong>www</strong> for every site, you can also create a bucket with the name <strong>www.example.com</strong>. For that one, configure it to redirect all requests for the main address.</p>
<p><img src="http://zanon.io/images/posts/2016-01-31-s3-www.png" alt="s3-www"></p>
<h3 id="configure-amazon-route-53-hosted-zone">Configure Amazon Route 53 Hosted Zone</h3>
<p>After buying your domain, you need to change the default Name Servers. The Name Servers are a set of server addresses (more than one for redundancy) that helps the DNS queries to translate the domain name to the correspondent address of the machine that is hosting your site. Since we want to host our app on Amazon, we need to give them this control. So, the name server will be changed from your domain registrar to Amazon&#39;s addresses. The Amazon service that is responsible for this kind of control is the Route 53.</p>
<p>Go to <a href="https://console.aws.amazon.com/route53">Amazon Route 53</a> and click to create a Hosted Zone for your domain. After creating it, click at your hosted zone and write down the given Name Server (NS).</p>
<p><img src="http://zanon.io/images/posts/2016-01-31-route53-nameservers.png" alt="route53-nameservers"></p>
<h3 id="create-amazon-route-53-aliases">Create Amazon Route 53 Aliases</h3>
<p>You need to create some aliases to map the incoming Amazon Route 53 requests to your S3 buckets. These aliases are created clicking to Create a Record Set.</p>
<p>You need to create a record set of the A-type for your <strong>example.com</strong> domain and CNAME-type for your <strong>www.example.com</strong> domain.</p>
<p>For the A-type record set, just select the S3 bucket within the available options.</p>
<p><img src="http://zanon.io/images/posts/2016-01-31-route53-a-recordset.png" alt="route53-a-recordset"></p>
<p>Regarding the CNAME-type, you need to provide an address. It should be the bucket endpoint address available at the bucket properties tab.</p>
<p><img src="http://zanon.io/images/posts/2016-01-31-route53-cname-recordset.png" alt="route53-cname-recordset"></p>
<h3 id="changing-the-name-servers">Changing the Name Servers</h3>
<p>After preparing your Amazon Host, you need to give them the domain control accessing your registrar website and changing the name servers configuration.</p>
<p>I&#39;ve bought my zanon.io domain at GoDaddy.com, so this tutorial uses their control panel to show how to configure your domain. However, since all domain sellers let you change your name server values, the control panels are different, but you need to make the same configuration.</p>
<p>1) Log into your domain registrar&#39;s control panel and click to manage your domains.</p>
<p><img src="http://zanon.io/images/posts/2016-01-31-godaddy-control-panel.png" alt="godaddy-control-panel"></p>
<p>2) Click at your domain name settings and select the Manage DNS option.</p>
<p><img src="http://zanon.io/images/posts/2016-01-31-godaddy-manage-dns.png" alt="godaddy-manage-dns"></p>
<p>3) View your configured name servers options and edit them with the addresses that are provided by AWS.</p>
<p><img src="http://zanon.io/images/posts/2016-01-31-godaddy-nameservers.png" alt="godaddy-nameservers"></p>
<h3 id="testing">Testing</h3>
<p>Due to cache, you need to wait some hours until this name server changing takes effect. While you wait, create a simple web page in a file named as index.html and upload it to your <strong>example.com</strong> bucket. When the cache is refreshed, you can see your webpage up and running typing your domain name.</p>
<h2 id="front-end">Front-End</h2>
<p>For our demo, we&#39;ll create just one file, named as index.html, with a simple button to retrieve the weather info. Nothing fancy. For a real-world website, you would upload all HTML/CSS/JavaScript and images to your S3 bucket and would consider on configuring an Amazon CloudFront instance to serve your files using a CDN (Content Delivery Network) to provide a low latency connection for users throughout the world.</p>
<p><strong>index.html</strong> contents:</p>
<pre><code class="lang-html">&lt;div class=&quot;container&quot;&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-md-offset-5 col-md-2 text-center&quot;&gt;
      &lt;h3&gt;Daily Weather&lt;/h3&gt;
      &lt;input id=&quot;btn-show&quot; type=&quot;button&quot; class=&quot;btn btn-primary&quot; value=&#39;Show Current&#39;&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-md-offset-5 col-md-2&quot;&gt;
      &lt;p&gt;Value: &lt;span id=&quot;weather-value&quot;&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;a href=&quot;http://zanon.io/posts/building-serverless-websites-on-aws-tutorial&quot;&gt;&lt;p&gt;source&lt;/p&gt;&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>JavaScript code:</p>
<pre><code class="lang-javascript">$(document).ready(function() {

  $(&#39;#btn-show&#39;).on(&#39;click&#39;, function() {

      $.ajax({
        url: &quot;https://9l4ab3ahik.execute-api.us-east-1.amazonaws.com/dev/current/5&quot;,
        success: function(json) {
          $(&quot;#weather-value&quot;).append(json.value + &#39; ºC&#39;);
        }
      });
  });
});
</code></pre>
<p>Our Ajax call is using <a href="https://9l4ab3ahik.execute-api.us-east-1.amazonaws.com/dev/current/5">https://9l4ab3ahik.execute-api.us-east-1.amazonaws.com/dev/current/5</a> as the URL parameter. This is the address of out Lambda functions that we&#39;ll get later after deploying our app.</p>
<p>Result:</p>
<p><img src="http://zanon.io/images/posts/2016-01-31-demo.png" alt="demo"></p>
<h2 id="serverless-framework">Serverless Framework</h2>
<p>The Serverless Framework is a tool that helps you managing and deploying projects with API Gateway and Lambda Functions. You can do everything manually using Amazon&#39;s console, but it&#39;ll be hard to manage in big projects.</p>
<p>The Serverless Framework is a Node.js module. So, install it using NPM:</p>
<pre><code class="lang-xml">&gt; npm install serverless -g
</code></pre>
<p>In this tutorial, I&#39;ve used v0.5.6. They are currently developing v1.0 with breaking changes, but v0.5 already is pretty good for production.</p>
<h3 id="creating-an-iam-user">Creating an IAM User</h3>
<p>Serverless needs an AWS user account, but you can&#39;t simply create an Admin key with production access and share it with every developer of your organization. For security measures, if a developer need to deploy to production, it can generate the package using the flag <code>--noExeCf</code> (that means <em>don&#39;t execute Cloud Formation</em>) and give it to another person that will deploy with higher privileges and a multi-factor authentication. Read more at the official <a href="http://docs.serverless.com/docs/best-practices#section-don-t-give-administratoraccess-to-aws-api-keys">best practices guide</a>.</p>
<p>However, if you are just learning, you can create an Admin account to get it up and running quickly.</p>
<p>To create an user, browse the <a href="https://console.aws.amazon.com/iam">IAM console</a> and create a group first:</p>
<p><img src="http://zanon.io/images/posts/2016-01-31-iam-group.png" alt="iam-group"></p>
<p>Name it as <strong>serverless-group</strong> and attach the <strong>AdministratorAccess</strong> policy.</p>
<p><img src="http://zanon.io/images/posts/2016-01-31-iam-group-admin.png" alt="iam-group-admin"></p>
<p>After that, create a new user named as <strong>serverless-admin</strong>, write down its <strong>Access Key ID</strong> and <strong>Secret Access Key</strong>, and add it to the group that you have created.</p>
<p><img src="http://zanon.io/images/posts/2016-01-31-iam-user.png" alt="iam-user"></p>
<p><img src="http://zanon.io/images/posts/2016-01-31-iam-user-group.png" alt="iam-user-group"></p>
<h3 id="configuring-the-serverless-user">Configuring the Serverless User</h3>
<p>As Serverless uses the AWS Node.js SDK, it looks for a <strong>credentials</strong> file to load the access keys. It must be located at <strong>~/.aws/credentials</strong> on Mac/Linux or <strong>C:\Users\USERNAME\.aws\credentials</strong> on Windows.</p>
<p>Contents:</p>
<pre><code class="lang-xml">[default]
aws_access_key_id = your_access_key
aws_secret_access_key = your_secret_key
</code></pre>
<p>Also, you can specify what is your default region with a <strong>config</strong> file created in the same folder.</p>
<p>Contents:</p>
<pre><code class="lang-xml">[default]
region = us-east-1
</code></pre>
<p><strong>Note:</strong> [default] means the profile name. It must exist, but you can create more profiles with different access keys for different applications.</p>
<h3 id="creating-a-project">Creating a Project</h3>
<p>Change to the directory where you want to create your project folder and execute:</p>
<pre><code class="lang-xml">&gt; serverless project create
</code></pre>
<p>It&#39;ll ask the following questions:</p>
<ul>
<li><strong>Project Name</strong>: since they use CloudFormation for deployment and it tokenizes resources with <code>-</code> (dashs), use camelCase to avoid issues. For example, I&#39;ve named my project as serverlessDemo.</li>
<li><strong>Stage</strong>: start creating a <em>dev</em> stage. Later you can easily replicate your whole app for a <em>prod</em> environment.</li>
<li><strong>Profile</strong>: you can select a profile that exists inside your <strong>credentials</strong> file or create a new one here giving the AWS keys.</li>
<li><strong>Region</strong>: the region where your app will be deployed.</li>
</ul>
<p>This stage creates a project template in your file system and CloudFormation templates in your AWS account.</p>
<blockquote>
<p><strong>Tip</strong>: instead of the command <em>serverless</em>, you can type <em>sls</em> (e.g.: sls project create) as a shortcut. However, as a tutorial, I&#39;ll continue to use <em>serverless</em>.</p>
</blockquote>
<p>After creating the project, change to its directory before executing further commands:</p>
<pre><code class="lang-xml">&gt; cd serverlessDemo
</code></pre>
<h3 id="serverless-architecture">Serverless Architecture</h3>
<p>Serverless fits well in a <a href="http://martinfowler.com/articles/microservices.html">microservices architecture</a>. So, we&#39;ll create a microservice named <strong>weather</strong> that will contain the service <strong>current</strong> that is represented as a single function that returns the current local weather. We could also create another service named <strong>average</strong> that would be average of temperatures of the region. We could go further and create another microservice named <strong>users</strong> handled by <strong>createUser</strong> and <strong>deleteUser</strong>, but that&#39;s beyond this tutorial. Let&#39;s develop only the current weather.</p>
<p>In this scenario, the architecture would be the following:</p>
<pre><code class="lang-xml">serverlessDemo
  |__microservices
       |__weather
            |__current
                 |__handler.js
                 |__s-function.json
            |__average
                 |__handler.js
                 |__s-function.json
       |__users
            |__createUser
                 |__handler.js
                 |__s-function.json
            |__deleteUser
                 |__handler.js
                 |__s-function.json
</code></pre>
<h3 id="creating-a-function">Creating a Function</h3>
<p>Now, for the <strong>weather</strong> microservice, let&#39;s create the <strong>current</strong> function:</p>
<pre><code class="lang-xml">&gt; serverless function create microservices/weather/current
</code></pre>
<p>It&#39;ll ask for the runtime (Node or Python) and if you want to create a related endpoint (yes). This endpoint will hold the REST commands that will trigger your function.</p>
<p>The function is the element where you&#39;ll write your code to accomplish a very specific task. In this demo, it will retrieve the current local weather accepting a <strong>regionId</strong> as a parameter.</p>
<h3 id="implement-your-function">Implement your Function</h3>
<p>To implement your code, open the files <strong>handler.js</strong> and <strong>s-function.json</strong> localized inside the <strong>current</strong> folder:</p>
<pre><code class="lang-xml">serverlessDemo
  |__microservices
       |__weather
            |__current (Function)
                 |__handler.js
                 |__s-function.json
</code></pre>
<p>In <strong>s-function.json</strong>, we have something like:</p>
<pre><code class="lang-json">{
  &quot;name&quot;: &quot;current&quot;,
  &quot;runtime&quot;: &quot;nodejs4.3&quot;,
  &quot;handler&quot;: &quot;handler.handler&quot;,
  (...),
  &quot;endpoints&quot;: [
    {
      &quot;path&quot;: &quot;current&quot;,
      &quot;method&quot;: &quot;GET&quot;,
      &quot;authorizationType&quot;: &quot;none&quot;,
      &quot;authorizerFunction&quot;: false,
      &quot;apiKeyRequired&quot;: false,
      &quot;requestParameters&quot;: {},
      &quot;requestTemplates&quot;: {
        &quot;application/json&quot;: &quot;&quot;
      }
      (...)
    }
  ]
}
</code></pre>
<p>Change the &quot;path&quot; to:</p>
<pre><code class="lang-javascript">&quot;path&quot;: &quot;current/{regionId}&quot;
</code></pre>
<p>and the &quot;requestTemplates&quot; to:</p>
<pre><code class="lang-javascript">&quot;requestTemplates&quot;: {
  &quot;application/json&quot;: &quot;{\&quot;regionId\&quot;: \&quot;$input.params(&#39;regionId&#39;) \&quot;}&quot;
}
</code></pre>
<p>With those changes, we&#39;ll be able to use the <strong>regionId</strong> as an input parameter.</p>
<p>In <strong>handler.js</strong>, we have by default:</p>
<pre><code class="lang-javascript">module.exports.handler = function(event, context, cb) {
  return cb(null, {
    message: &#39;Go Serverless! Your Lambda function executed successfully!&#39;
  });
};
</code></pre>
<p>Change it to:</p>
<pre><code class="lang-javascript">module.exports.handler = function(event, context, cb) {
  return cb(null, {
    message: &#39;Go Serverless! Input was: &#39; + event.regionId
  });
};
</code></pre>
<h3 id="deploy">Deploy</h3>
<p>Let&#39;s test this using the <strong>dash deploy</strong> command:</p>
<pre><code class="lang-xml">&gt; serverless dash deploy
</code></pre>
<p>It will show, like in a dashboard, all assets that you have (functions and endpoints). Choose all (pressing ENTER) and hit the <strong>deploy</strong> option.</p>
<p>After deploying, you&#39;ll get a list of URLs where you functions were hosted. For example, mine is available at: <a href="https://9l4ab3ahik.execute-api.us-east-1.amazonaws.com/dev/current/{regionId}">https://9l4ab3ahik.execute-api.us-east-1.amazonaws.com/dev/current/{regionId}</a></p>
<p>Replaced the <code>{regionId}</code> by a number and it will work.
E.g.: <a href="https://9l4ab3ahik.execute-api.us-east-1.amazonaws.com/dev/current/5">https://9l4ab3ahik.execute-api.us-east-1.amazonaws.com/dev/current/5</a></p>
<h3 id="enable-cross-origin-resource-sharing-cors-">Enable Cross-Origin Resource Sharing (CORS)</h3>
<p>Since our API is deployed at the AWS domain and not inside our app domain, the browsers won&#39;t process AJAX requests due to security issues. To workaround this, you can use <a href="http://json-p.org/">JSONP</a> at the clients-side or <a href="http://enable-cors.org/">enable CORS</a> at Amazon&#39;s side. I prefer to enable CORS.</p>
<p>To enable, install the <a href="https://github.com/joostfarla/serverless-cors-plugin">serverless-cors-plugin</a>:</p>
<pre><code class="lang-xml">&gt; npm install serverless-cors-plugin --save
</code></pre>
<p>In your project root, open the file <strong>s-project.json</strong> and replace &quot;plugins&quot; by:</p>
<pre><code class="lang-javascript">&quot;plugins&quot;: [
  &quot;serverless-cors-plugin&quot;
]
</code></pre>
<p>In <strong>s-function.json</strong> (inside your function), replace</p>
<pre><code class="lang-javascript">&quot;custom&quot;: {
  &quot;excludePatterns&quot;: []
},
</code></pre>
<p>by</p>
<pre><code class="lang-javascript">&quot;custom&quot;: {
  &quot;cors&quot;: {
    &quot;allowOrigin&quot;: &quot;*&quot;,
    &quot;allowHeaders&quot;: [&quot;Content-Type&quot;, &quot;X-Amz-Date&quot;, &quot;Authorization&quot;, &quot;X-Api-Key&quot;]
  },
  &quot;excludePatterns&quot;: []
},
</code></pre>
<p>And that&#39;s it! You can test your front-end code now using the URL that you have deployed.</p>
<h2 id="simpledb">SimpleDB</h2>
<p>In this tutorial, we have already configured and deployed the front-end and back-end code. If that&#39;s enough for you, great! If not, I&#39;ll continue showing how to integrate the back-end code with SimpleDB that is a serverless database offered by AWS.</p>
<h3 id="initialize-your-data">Initialize your Data</h3>
<p>Since there is no AWS Console for SimpleDB, you need to create your model using third-party tools or the AWS SDK. For this demo, I&#39;ll simplify and use the <a href="https://aws.amazon.com/code/JavaScript/1137">Scratchpad</a> web app. To run, download, unzip and host the app in a web server like IIS or Apache Tomcat.</p>
<p>After adding the IAM credentials, call the CreatDomain method to create the equivalent of a table for the relational world and the PutAttributes to add a new record for your domain.</p>
<p>Create Domain:
<img src="http://zanon.io/images/posts/2016-01-31-simpledb-domain.png" alt="simpledb-domain"></p>
<p>Put Attributes:
<img src="http://zanon.io/images/posts/2016-01-31-simpledb-attr.png" alt="simpledb-attr"></p>
<p>Test:
<img src="http://zanon.io/images/posts/2016-01-31-simpledb-select.png" alt="simpledb-select"></p>
<h3 id="retrieve-the-data-using-a-lambda-function">Retrieve the Data using a Lambda function</h3>
<p>To connect to your SimpleDB instance, install the AWS SDK:</p>
<pre><code class="lang-xml">&gt; npm install aws-sdk --save
</code></pre>
<p>Let&#39;s go back to our handle.js function and rewrite it to the following:</p>
<pre><code class="lang-javascript">var AWS = require(&#39;aws-sdk&#39;);

function queryData(query, cb) {
  var simpledb = new AWS.SimpleDB();

  var params = {
    SelectExpression: query,
    ConsistentRead: false,
    NextToken: &#39;&#39;
  };

  simpledb.select(params, cb);
}

module.exports.handler = function(event, context, cb) {
  // sanitize the input confirming that it&#39;s a number
  var regionId = Number(event.regionId);
  var query = `select Value from Weather where ID = &#39;${regionId}&#39;`;

  queryData(query, function(err, response) {
    return cb(err, {
      value: response.Items[0].Attributes[0].Value
    });
  });
};
</code></pre>
<h3 id="add-permissions-to-your-lambda-functions-to-read-simpledb-data">Add permissions to your Lambda functions to read SimpleDB data</h3>
<p>The Lambda functions that you have just deployed will not have access to your AWS Resources. If you want them to have this access, you have to give them explicitly.</p>
<p>Modify your <strong>s-resources-cf.json</strong> file with the following:</p>
<pre><code class="lang-json">&quot;IamPolicyLambda&quot;: {
  &quot;Type&quot;: &quot;AWS::IAM::Policy&quot;,
  &quot;Properties&quot;: {
    &quot;PolicyName&quot;: &quot;${stage}-${project}-lambda&quot;,
    &quot;PolicyDocument&quot;: {
      &quot;Version&quot;: &quot;2012-10-17&quot;,
      &quot;Statement&quot;: [
        {
          &quot;Effect&quot;: &quot;Allow&quot;,
          &quot;Action&quot;: [
            &quot;logs:CreateLogGroup&quot;,
            &quot;logs:CreateLogStream&quot;,
            &quot;logs:PutLogEvents&quot;
          ],
          &quot;Resource&quot;: &quot;arn:aws:logs:${region}:*:*&quot;
        },

        // ================
        // Added this block
        {
          &quot;Effect&quot;: &quot;Allow&quot;,
          &quot;Action&quot;: [
            &quot;*&quot;
          ],
          &quot;Resource&quot;: &quot;arn:aws:sdb:${region}:[ACCOUNT_ID]:domain/Weather&quot;
        }
        // End
        // ================

      ]
    },
    &quot;Roles&quot;: [
      {
         &quot;Ref&quot;: &quot;IamRoleLambda&quot;
       }
    ]
  }
}
</code></pre>
<p><code>${region}</code> is a variable that will be set with your region, so don&#39;t change this.
<code>[ACCOUNT_ID]</code> is a placeholder. Change this to your account id.</p>
<p>To deploy the changes, run <code>dash</code> for Lambda and <code>resources</code> for permissions.</p>
<pre><code class="lang-xml">&gt; serverless dash deploy
&gt; serverless resources deploy
</code></pre>
<p>And... that&#39;s it! The app is working at <a href="http://serverless-demo.zanon.io">http://serverless-demo.zanon.io</a>, where the HTML/CSS/JS is hosted on S3, the back-end code is a service that runs only on demand with AWS Lambda and the data is stored in SimpleDB, which generate costs only while processing queries.</p>
<a share-twitter="share-twitter" data-text="&quot;Building Serverless Websites on AWS - Tutorial&quot;" data-url="http://zanon.io/posts/building-serverless-websites-on-aws-tutorial" data-via="zanon_io" data-size="large"></a>
    </div>
  </div>
</div>
<div class="disqus">
  <dir-disqus></dir-disqus>
</div>
        </div>
      </div>
    </div>

    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.1/angular.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.1/angular-route.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/0.13.0/ui-bootstrap-tpls.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.6/highlight.min.js"></script>

    <script src="/js/app.js"></script>
    <script src="/js/controllers.js"></script>
    <script src="/js/directives.js"></script>
    <script src="/js/routes.js"></script>

    <script src="/js/assets/404game.min.js"></script>
    <script src="/js/assets/dir-disqus.min.js"></script>

    <script src="http://platform.twitter.com/widgets.js"></script>

    <!-- Google Analytics -->
    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

      ga('create', 'UA-63834414-1', 'auto');
      ga('send', 'pageview');
    </script>
  </body>
</html>
